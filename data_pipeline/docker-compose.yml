x-airflow-common:
  &airflow-common
  # image: apache/airflow:2.10.2
  build:
    context: ..
    dockerfile: data_pipeline/Dockerfile
  env_file:
    - ../.env
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: LocalExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
    AIRFLOW_CONFIG: '/opt/airflow/config/airflow.cfg'
  volumes:
    - ./dags:/opt/airflow/dags
    - ./logs:/opt/airflow/logs
    - ./config:/opt/airflow/config
    - ./src:/opt/airflow/src        # Mount src directory to include scripts and constants.py
    - ./secrets:/opt/airflow/secrets # Mount secrets for GCP credentials
  user: "${AIRFLOW_UID}:0"
  depends_on:
    &airflow-common-depends-on
    fastapi:
      condition: service_healthy
    postgres:
      condition: service_healthy

services:
  test_env:
    image: busybox
    env_file:
      - ../.env
    command: /bin/sh -c 'echo $GOOGLE_APPLICATION_CREDENTIALS'

  # sql proxy
  cloud-sql-proxy:
    image: gcr.io/cloud-sql-connectors/cloud-sql-proxy
    env_file:
      - ../.env
    command: "--address 0.0.0.0 --port 5432 ${CLOUD_SQL_INSTANCE}"
    ports:
      - "5432:5432"
    environment:
      GOOGLE_APPLICATION_CREDENTIALS: "/secrets/service-account-key.json"
    volumes:
      - ../data_pipeline/secrets:/secrets
    
  # fast api server
  fastapi:
    build: 
      context: ..
      dockerfile: app/dockerfile
    depends_on:
      - cloud-sql-proxy
    ports:
      - "8000:8000"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8000/health"]
      interval: 15s
      retries: 3
      start_period: 60s
      timeout: 10s

  postgres:
    image: postgres:13
    restart: always
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 10s
      retries: 5
      start_period: 5s
      
  airflow-init:
      <<: *airflow-common
      entrypoint: /bin/bash
      command:
        - -c
        - |
          mkdir -p /sources/logs /sources/dags
          chown -R "${AIRFLOW_UID}:0" /sources/{logs,dags}
          exec /entrypoint airflow version
      environment:
        <<: *airflow-common-env
        _AIRFLOW_DB_MIGRATE: 'true'
        _AIRFLOW_WWW_USER_CREATE: 'true'
        _AIRFLOW_WWW_USER_USERNAME: ${AIRFLOW_WWW_USER_USERNAME}
        _AIRFLOW_WWW_USER_PASSWORD: ${AIRFLOW_WWW_USER_PASSWORD}
      user: "0:0"
      volumes:
        - /sources

  airflow-webserver:
      <<: *airflow-common
      command: webserver
      ports:
        - "8080:8080"
      healthcheck:
        test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
        interval: 30s
        timeout: 10s
        retries: 5
        start_period: 30s
      restart: always
      depends_on:
        <<: *airflow-common-depends-on
        airflow-init:
          condition: service_completed_successfully

  airflow-scheduler:
      <<: *airflow-common
      command: scheduler
      healthcheck:
        test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
        interval: 30s
        timeout: 10s
        retries: 5
        start_period: 30s
      restart: always
      depends_on:
        <<: *airflow-common-depends-on
        airflow-init:
          condition: service_completed_successfully

  airflow-triggerer:
      <<: *airflow-common
      command: triggerer
      healthcheck:
        test: ["CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"']
        interval: 30s
        timeout: 10s
        retries: 5
        start_period: 30s
      restart: always
      depends_on:
        <<: *airflow-common-depends-on
        airflow-init:
          condition: service_completed_successfully

volumes:
  postgres-db-volume: