# .github/workflows/build-image.yml
name: Build and Push Image

on:
  workflow_dispatch:
    inputs:
      image_type:
        description: 'Image to build (backend/data_pipeline)'
        required: true
        type: choice
        options: [backend, data_pipeline]
      image_tag:
        description: 'Image tag'
        required: true
        default: latest

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      
      - name: Load config
        id: config
        uses: actions/github-script@v6
        with:
          script: |
            const yaml = require('js-yaml');
            const fs = require('fs');
            const config = yaml.load(fs.readFileSync('config.yaml', 'utf8'));
            const image = config.images['${{ github.event.inputs.image_type }}'];
            return {
              project_id: config.project.id,
              dockerfile: image.dockerfile_path,
              image_name: image.image_name,
              context: image.context_path,
              registry: config.build.registry
            }

      - id: 'auth'
        uses: 'google-github-actions/auth@v0'
        with:
          credentials_json: '${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to GCR
        uses: docker/login-action@v1
        with:
          registry: ${{ steps.config.outputs.registry }}
          username: _json_key
          password: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: ${{ steps.config.outputs.context }}
          file: ${{ steps.config.outputs.dockerfile }}
          push: true
          tags: ${{ steps.config.outputs.registry }}/${{ steps.config.outputs.project_id }}/${{ steps.config.outputs.image_name }}:${{ github.event.inputs.image_tag }}
          cache-from: type=registry,ref=${{ steps.config.outputs.registry }}/${{ steps.config.outputs.project_id }}/${{ steps.config.outputs.image_name }}:latest
          cache-to: type=inline