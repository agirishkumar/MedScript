# app/utils/middleware.py

'''
Middleware for adding a unique request ID to the response and logging request details, including errors and processing time.
'''

import uuid
from fastapi import Request
from starlette.middleware.base import BaseHTTPMiddleware
from starlette.responses import Response
import time
from app.core.logging import logger

class RequestIDMiddleware(BaseHTTPMiddleware):
    async def dispatch(self, request: Request, call_next):
        """
        Add a unique UUID4 as X-Request-ID header to the response
        and store it in the request state.
        """
        request_id = str(uuid.uuid4())
        request.state.request_id = request_id
        response = await call_next(request)
        response.headers['X-Request-ID'] = request_id
        return response

class LoggingMiddleware(BaseHTTPMiddleware):
    async def dispatch(self, request: Request, call_next):
        """
        Log the request and its details.

        Log the request method, path, status code, process time, and request ID.

        The request ID is generated by the RequestIDMiddleware and stored in the
        request state. If RequestIDMiddleware is not present, log without the request ID.
        """
        start_time = time.time()
        
        try:
            response = await call_next(request)
        except Exception as e:
            # If there is an error, log it and set response to 500
            process_time = time.time() - start_time
            log_dict = {
                "request_id": getattr(request.state, "request_id", "N/A"),
                "method": request.method,
                "path": request.url.path,
                "status_code": 500,
                "process_time": f"{process_time:.2f}s",
                "error": str(e)
            }
            log_msg = f"Request: {log_dict['method']} {log_dict['path']} | " \
                      f"Status: {log_dict['status_code']} | " \
                      f"Process Time: {log_dict['process_time']} | " \
                      f"Request ID: {log_dict['request_id']} | Error: {log_dict['error']}"
            logger.error(log_msg, extra=log_dict)
            return Response("Internal Server Error", status_code=500)

        # Calculate process time
        process_time = time.time() - start_time

        # Only log the request ID if it exists
        request_id = getattr(request.state, "request_id", None)
        log_msg = f"Request: {request.method} {request.url.path} | Status: {response.status_code} | " \
                  f"Process Time: {process_time:.2f}s"
        if request_id:
            log_msg += f" | Request ID: {request_id}"

        logger.info(log_msg)
        
        return response
