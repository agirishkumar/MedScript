# app/utils/middleware.py

import uuid
from fastapi import Request
from starlette.middleware.base import BaseHTTPMiddleware
from starlette.responses import Response
import time
from app.core.logging import logger

class RequestIDMiddleware(BaseHTTPMiddleware):
    async def dispatch(self, request: Request, call_next):
        """
        Add a unique UUID4 as X-Request-ID header to the response
        and store it in the request state.

        This allows to identify the request in the logs.
        """
        request_id = str(uuid.uuid4())
        request.state.request_id = request_id
        response = await call_next(request)
        response.headers['X-Request-ID'] = request_id
        return response

class LoggingMiddleware(BaseHTTPMiddleware):
    async def dispatch(self, request: Request, call_next):
        """
        Log the request and its details.

        Log the request method, path, status code, process time and request ID.

        The request ID is generated by the RequestIDMiddleware and stored in the
        request state.

        The log message format is:
        "Request: {method} {path} | Status: {status_code} | Process Time: {process_time} | Request ID: {request_id}"

        The log message includes the following extra information:
        - request_id: The request ID
        - method: The request method
        - path: The request path
        - status_code: The response status code
        - process_time: The time taken to process the request
        """
        start_time = time.time()
        
        response = await call_next(request)
        
        process_time = time.time() - start_time
        log_dict = {
            "request_id": getattr(request.state, "request_id", None),
            "method": request.method,
            "path": request.url.path,
            "status_code": response.status_code,
            "process_time": f"{process_time:.2f}s"
        }
        
        log_msg = f"Request: {log_dict['method']} {log_dict['path']} | " \
                  f"Status: {log_dict['status_code']} | " \
                  f"Process Time: {log_dict['process_time']} | " \
                  f"Request ID: {log_dict['request_id']}"
        
        logger.info(log_msg, extra=log_dict)
        
        return response                               